// Code generated by protoc-gen-go.
// source: ticket.proto
// DO NOT EDIT!

/*
Package ticket is a generated protocol buffer package.

It is generated from these files:
	ticket.proto

It has these top-level messages:
	AccountRequest
	AccountReply
	LoginRequest
	LoginReply
	TicketDetails
	RecordReply
	PullLocRequest
	PullTicketRequest
	SlaveLoc
	MasterOrder
*/
package ticket

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountRequest struct {
	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Password       string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	PoliceName     string `protobuf:"bytes,3,opt,name=police_name,json=policeName" json:"police_name,omitempty"`
	PoliceType     string `protobuf:"bytes,4,opt,name=police_type,json=policeType" json:"police_type,omitempty"`
	PoliceCity     string `protobuf:"bytes,5,opt,name=police_city,json=policeCity" json:"police_city,omitempty"`
	PoliceDept     string `protobuf:"bytes,6,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
	PoliceStation  string `protobuf:"bytes,7,opt,name=police_station,json=policeStation" json:"police_station,omitempty"`
	PolicePortrait []byte `protobuf:"bytes,8,opt,name=police_portrait,json=policePortrait,proto3" json:"police_portrait,omitempty"`
}

func (m *AccountRequest) Reset()                    { *m = AccountRequest{} }
func (m *AccountRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()               {}
func (*AccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AccountRequest) GetPoliceName() string {
	if m != nil {
		return m.PoliceName
	}
	return ""
}

func (m *AccountRequest) GetPoliceType() string {
	if m != nil {
		return m.PoliceType
	}
	return ""
}

func (m *AccountRequest) GetPoliceCity() string {
	if m != nil {
		return m.PoliceCity
	}
	return ""
}

func (m *AccountRequest) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

func (m *AccountRequest) GetPoliceStation() string {
	if m != nil {
		return m.PoliceStation
	}
	return ""
}

func (m *AccountRequest) GetPolicePortrait() []byte {
	if m != nil {
		return m.PolicePortrait
	}
	return nil
}

type AccountReply struct {
	CreateSuccess bool `protobuf:"varint,1,opt,name=create_success,json=createSuccess" json:"create_success,omitempty"`
}

func (m *AccountReply) Reset()                    { *m = AccountReply{} }
func (m *AccountReply) String() string            { return proto.CompactTextString(m) }
func (*AccountReply) ProtoMessage()               {}
func (*AccountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountReply) GetCreateSuccess() bool {
	if m != nil {
		return m.CreateSuccess
	}
	return false
}

type LoginRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginReply struct {
	LoginSuccess   bool   `protobuf:"varint,1,opt,name=login_success,json=loginSuccess" json:"login_success,omitempty"`
	PoliceName     string `protobuf:"bytes,2,opt,name=police_name,json=policeName" json:"police_name,omitempty"`
	PoliceType     string `protobuf:"bytes,3,opt,name=police_type,json=policeType" json:"police_type,omitempty"`
	PoliceCity     string `protobuf:"bytes,4,opt,name=police_city,json=policeCity" json:"police_city,omitempty"`
	PoliceDept     string `protobuf:"bytes,5,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
	PoliceStation  string `protobuf:"bytes,6,opt,name=police_station,json=policeStation" json:"police_station,omitempty"`
	PolicePortrait []byte `protobuf:"bytes,7,opt,name=police_portrait,json=policePortrait,proto3" json:"police_portrait,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginReply) GetLoginSuccess() bool {
	if m != nil {
		return m.LoginSuccess
	}
	return false
}

func (m *LoginReply) GetPoliceName() string {
	if m != nil {
		return m.PoliceName
	}
	return ""
}

func (m *LoginReply) GetPoliceType() string {
	if m != nil {
		return m.PoliceType
	}
	return ""
}

func (m *LoginReply) GetPoliceCity() string {
	if m != nil {
		return m.PoliceCity
	}
	return ""
}

func (m *LoginReply) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

func (m *LoginReply) GetPoliceStation() string {
	if m != nil {
		return m.PoliceStation
	}
	return ""
}

func (m *LoginReply) GetPolicePortrait() []byte {
	if m != nil {
		return m.PolicePortrait
	}
	return nil
}

type TicketDetails struct {
	TicketId       int64   `protobuf:"varint,1,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	UserId         string  `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	LicenseNum     string  `protobuf:"bytes,3,opt,name=license_num,json=licenseNum" json:"license_num,omitempty"`
	LicenseColor   string  `protobuf:"bytes,4,opt,name=license_color,json=licenseColor" json:"license_color,omitempty"`
	LicenseCorrect bool    `protobuf:"varint,5,opt,name=license_correct,json=licenseCorrect" json:"license_correct,omitempty"`
	VehicleType    string  `protobuf:"bytes,6,opt,name=vehicle_type,json=vehicleType" json:"vehicle_type,omitempty"`
	VehicleColor   string  `protobuf:"bytes,7,opt,name=vehicle_color,json=vehicleColor" json:"vehicle_color,omitempty"`
	Year           int32   `protobuf:"varint,8,opt,name=year" json:"year,omitempty"`
	Month          int32   `protobuf:"varint,9,opt,name=month" json:"month,omitempty"`
	Day            int32   `protobuf:"varint,10,opt,name=day" json:"day,omitempty"`
	Hour           int32   `protobuf:"varint,11,opt,name=hour" json:"hour,omitempty"`
	Minute         int32   `protobuf:"varint,12,opt,name=minute" json:"minute,omitempty"`
	Address        string  `protobuf:"bytes,13,opt,name=address" json:"address,omitempty"`
	Longitude      float64 `protobuf:"fixed64,14,opt,name=longitude" json:"longitude,omitempty"`
	Latitude       float64 `protobuf:"fixed64,15,opt,name=latitude" json:"latitude,omitempty"`
	MapImage       []byte  `protobuf:"bytes,16,opt,name=map_image,json=mapImage,proto3" json:"map_image,omitempty"`
	FarImage       []byte  `protobuf:"bytes,17,opt,name=far_image,json=farImage,proto3" json:"far_image,omitempty"`
	CloseImage     []byte  `protobuf:"bytes,18,opt,name=close_image,json=closeImage,proto3" json:"close_image,omitempty"`
	TicketImage    []byte  `protobuf:"bytes,19,opt,name=ticket_image,json=ticketImage,proto3" json:"ticket_image,omitempty"`
}

func (m *TicketDetails) Reset()                    { *m = TicketDetails{} }
func (m *TicketDetails) String() string            { return proto.CompactTextString(m) }
func (*TicketDetails) ProtoMessage()               {}
func (*TicketDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TicketDetails) GetTicketId() int64 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *TicketDetails) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TicketDetails) GetLicenseNum() string {
	if m != nil {
		return m.LicenseNum
	}
	return ""
}

func (m *TicketDetails) GetLicenseColor() string {
	if m != nil {
		return m.LicenseColor
	}
	return ""
}

func (m *TicketDetails) GetLicenseCorrect() bool {
	if m != nil {
		return m.LicenseCorrect
	}
	return false
}

func (m *TicketDetails) GetVehicleType() string {
	if m != nil {
		return m.VehicleType
	}
	return ""
}

func (m *TicketDetails) GetVehicleColor() string {
	if m != nil {
		return m.VehicleColor
	}
	return ""
}

func (m *TicketDetails) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *TicketDetails) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *TicketDetails) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *TicketDetails) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *TicketDetails) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *TicketDetails) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TicketDetails) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *TicketDetails) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *TicketDetails) GetMapImage() []byte {
	if m != nil {
		return m.MapImage
	}
	return nil
}

func (m *TicketDetails) GetFarImage() []byte {
	if m != nil {
		return m.FarImage
	}
	return nil
}

func (m *TicketDetails) GetCloseImage() []byte {
	if m != nil {
		return m.CloseImage
	}
	return nil
}

func (m *TicketDetails) GetTicketImage() []byte {
	if m != nil {
		return m.TicketImage
	}
	return nil
}

type RecordReply struct {
	RecordSuccess bool `protobuf:"varint,1,opt,name=record_success,json=recordSuccess" json:"record_success,omitempty"`
}

func (m *RecordReply) Reset()                    { *m = RecordReply{} }
func (m *RecordReply) String() string            { return proto.CompactTextString(m) }
func (*RecordReply) ProtoMessage()               {}
func (*RecordReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RecordReply) GetRecordSuccess() bool {
	if m != nil {
		return m.RecordSuccess
	}
	return false
}

type PullLocRequest struct {
	Mid string `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
}

func (m *PullLocRequest) Reset()                    { *m = PullLocRequest{} }
func (m *PullLocRequest) String() string            { return proto.CompactTextString(m) }
func (*PullLocRequest) ProtoMessage()               {}
func (*PullLocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PullLocRequest) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

type PullTicketRequest struct {
	Mid string `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
}

func (m *PullTicketRequest) Reset()                    { *m = PullTicketRequest{} }
func (m *PullTicketRequest) String() string            { return proto.CompactTextString(m) }
func (*PullTicketRequest) ProtoMessage()               {}
func (*PullTicketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PullTicketRequest) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

type SlaveLoc struct {
	Sid       string  `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	Latitude  float64 `protobuf:"fixed64,3,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *SlaveLoc) Reset()                    { *m = SlaveLoc{} }
func (m *SlaveLoc) String() string            { return proto.CompactTextString(m) }
func (*SlaveLoc) ProtoMessage()               {}
func (*SlaveLoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SlaveLoc) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SlaveLoc) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *SlaveLoc) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

type MasterOrder struct {
	Mid         string `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
	MasterOrder string `protobuf:"bytes,2,opt,name=master_order,json=masterOrder" json:"master_order,omitempty"`
}

func (m *MasterOrder) Reset()                    { *m = MasterOrder{} }
func (m *MasterOrder) String() string            { return proto.CompactTextString(m) }
func (*MasterOrder) ProtoMessage()               {}
func (*MasterOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MasterOrder) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *MasterOrder) GetMasterOrder() string {
	if m != nil {
		return m.MasterOrder
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountRequest)(nil), "ticket.AccountRequest")
	proto.RegisterType((*AccountReply)(nil), "ticket.AccountReply")
	proto.RegisterType((*LoginRequest)(nil), "ticket.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "ticket.LoginReply")
	proto.RegisterType((*TicketDetails)(nil), "ticket.TicketDetails")
	proto.RegisterType((*RecordReply)(nil), "ticket.RecordReply")
	proto.RegisterType((*PullLocRequest)(nil), "ticket.PullLocRequest")
	proto.RegisterType((*PullTicketRequest)(nil), "ticket.PullTicketRequest")
	proto.RegisterType((*SlaveLoc)(nil), "ticket.SlaveLoc")
	proto.RegisterType((*MasterOrder)(nil), "ticket.MasterOrder")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ticket service

type TicketClient interface {
	RhinoCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	RhinoLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	HareCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	HareLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	RecordTicket(ctx context.Context, in *TicketDetails, opts ...grpc.CallOption) (*RecordReply, error)
	SlaveSubmit(ctx context.Context, in *SlaveLoc, opts ...grpc.CallOption) (*MasterOrder, error)
	MasterReceive(ctx context.Context, opts ...grpc.CallOption) (Ticket_MasterReceiveClient, error)
	PullLocation(ctx context.Context, in *PullLocRequest, opts ...grpc.CallOption) (Ticket_PullLocationClient, error)
	PullTicket(ctx context.Context, in *PullTicketRequest, opts ...grpc.CallOption) (Ticket_PullTicketClient, error)
}

type ticketClient struct {
	cc *grpc.ClientConn
}

func NewTicketClient(cc *grpc.ClientConn) TicketClient {
	return &ticketClient{cc}
}

func (c *ticketClient) RhinoCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/RhinoCreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) RhinoLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/RhinoLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) HareCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/HareCreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) HareLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/HareLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) RecordTicket(ctx context.Context, in *TicketDetails, opts ...grpc.CallOption) (*RecordReply, error) {
	out := new(RecordReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/RecordTicket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) SlaveSubmit(ctx context.Context, in *SlaveLoc, opts ...grpc.CallOption) (*MasterOrder, error) {
	out := new(MasterOrder)
	err := grpc.Invoke(ctx, "/ticket.Ticket/SlaveSubmit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) MasterReceive(ctx context.Context, opts ...grpc.CallOption) (Ticket_MasterReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[0], c.cc, "/ticket.Ticket/MasterReceive", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketMasterReceiveClient{stream}
	return x, nil
}

type Ticket_MasterReceiveClient interface {
	Send(*MasterOrder) error
	Recv() (*SlaveLoc, error)
	grpc.ClientStream
}

type ticketMasterReceiveClient struct {
	grpc.ClientStream
}

func (x *ticketMasterReceiveClient) Send(m *MasterOrder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ticketMasterReceiveClient) Recv() (*SlaveLoc, error) {
	m := new(SlaveLoc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketClient) PullLocation(ctx context.Context, in *PullLocRequest, opts ...grpc.CallOption) (Ticket_PullLocationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[1], c.cc, "/ticket.Ticket/PullLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketPullLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticket_PullLocationClient interface {
	Recv() (*SlaveLoc, error)
	grpc.ClientStream
}

type ticketPullLocationClient struct {
	grpc.ClientStream
}

func (x *ticketPullLocationClient) Recv() (*SlaveLoc, error) {
	m := new(SlaveLoc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketClient) PullTicket(ctx context.Context, in *PullTicketRequest, opts ...grpc.CallOption) (Ticket_PullTicketClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[2], c.cc, "/ticket.Ticket/PullTicket", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketPullTicketClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticket_PullTicketClient interface {
	Recv() (*TicketDetails, error)
	grpc.ClientStream
}

type ticketPullTicketClient struct {
	grpc.ClientStream
}

func (x *ticketPullTicketClient) Recv() (*TicketDetails, error) {
	m := new(TicketDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ticket service

type TicketServer interface {
	RhinoCreateAccount(context.Context, *AccountRequest) (*AccountReply, error)
	RhinoLogin(context.Context, *LoginRequest) (*LoginReply, error)
	HareCreateAccount(context.Context, *AccountRequest) (*AccountReply, error)
	HareLogin(context.Context, *LoginRequest) (*LoginReply, error)
	RecordTicket(context.Context, *TicketDetails) (*RecordReply, error)
	SlaveSubmit(context.Context, *SlaveLoc) (*MasterOrder, error)
	MasterReceive(Ticket_MasterReceiveServer) error
	PullLocation(*PullLocRequest, Ticket_PullLocationServer) error
	PullTicket(*PullTicketRequest, Ticket_PullTicketServer) error
}

func RegisterTicketServer(s *grpc.Server, srv TicketServer) {
	s.RegisterService(&_Ticket_serviceDesc, srv)
}

func _Ticket_RhinoCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).RhinoCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/RhinoCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).RhinoCreateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_RhinoLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).RhinoLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/RhinoLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).RhinoLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_HareCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).HareCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/HareCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).HareCreateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_HareLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).HareLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/HareLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).HareLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_RecordTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).RecordTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/RecordTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).RecordTicket(ctx, req.(*TicketDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_SlaveSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlaveLoc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).SlaveSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/SlaveSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).SlaveSubmit(ctx, req.(*SlaveLoc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_MasterReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TicketServer).MasterReceive(&ticketMasterReceiveServer{stream})
}

type Ticket_MasterReceiveServer interface {
	Send(*SlaveLoc) error
	Recv() (*MasterOrder, error)
	grpc.ServerStream
}

type ticketMasterReceiveServer struct {
	grpc.ServerStream
}

func (x *ticketMasterReceiveServer) Send(m *SlaveLoc) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ticketMasterReceiveServer) Recv() (*MasterOrder, error) {
	m := new(MasterOrder)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ticket_PullLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullLocRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServer).PullLocation(m, &ticketPullLocationServer{stream})
}

type Ticket_PullLocationServer interface {
	Send(*SlaveLoc) error
	grpc.ServerStream
}

type ticketPullLocationServer struct {
	grpc.ServerStream
}

func (x *ticketPullLocationServer) Send(m *SlaveLoc) error {
	return x.ServerStream.SendMsg(m)
}

func _Ticket_PullTicket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTicketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServer).PullTicket(m, &ticketPullTicketServer{stream})
}

type Ticket_PullTicketServer interface {
	Send(*TicketDetails) error
	grpc.ServerStream
}

type ticketPullTicketServer struct {
	grpc.ServerStream
}

func (x *ticketPullTicketServer) Send(m *TicketDetails) error {
	return x.ServerStream.SendMsg(m)
}

var _Ticket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.Ticket",
	HandlerType: (*TicketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RhinoCreateAccount",
			Handler:    _Ticket_RhinoCreateAccount_Handler,
		},
		{
			MethodName: "RhinoLogin",
			Handler:    _Ticket_RhinoLogin_Handler,
		},
		{
			MethodName: "HareCreateAccount",
			Handler:    _Ticket_HareCreateAccount_Handler,
		},
		{
			MethodName: "HareLogin",
			Handler:    _Ticket_HareLogin_Handler,
		},
		{
			MethodName: "RecordTicket",
			Handler:    _Ticket_RecordTicket_Handler,
		},
		{
			MethodName: "SlaveSubmit",
			Handler:    _Ticket_SlaveSubmit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MasterReceive",
			Handler:       _Ticket_MasterReceive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullLocation",
			Handler:       _Ticket_PullLocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullTicket",
			Handler:       _Ticket_PullTicket_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ticket.proto",
}

func init() { proto.RegisterFile("ticket.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0x8d, 0xfc, 0xed, 0x91, 0xec, 0x38, 0xdc, 0xed, 0x56, 0x75, 0x0b, 0xc4, 0xab, 0xc5, 0xa2,
	0x3e, 0x05, 0x8b, 0x7e, 0x1f, 0x7a, 0xa9, 0x9d, 0x43, 0x03, 0xa4, 0x5b, 0x43, 0x5e, 0xf4, 0x6a,
	0x70, 0x29, 0x26, 0x26, 0x2a, 0x89, 0x2a, 0x45, 0xa5, 0x50, 0xef, 0xfd, 0x11, 0xfd, 0x23, 0x3d,
	0xf5, 0xc7, 0x15, 0xfc, 0x90, 0x2c, 0x3b, 0x6e, 0x93, 0x45, 0x6e, 0x9c, 0x37, 0x6f, 0x38, 0xf4,
	0x9b, 0x47, 0x5a, 0xe0, 0x49, 0x46, 0x7e, 0xa5, 0xf2, 0x22, 0x13, 0x5c, 0x72, 0xd4, 0x33, 0x51,
	0xf0, 0x57, 0x0b, 0xc6, 0x3f, 0x10, 0xc2, 0x8b, 0x54, 0x86, 0xf4, 0xb7, 0x82, 0xe6, 0x12, 0x7d,
	0x0c, 0xfd, 0x22, 0xa7, 0x62, 0xc3, 0x22, 0xdf, 0x99, 0x39, 0xf3, 0x61, 0xd8, 0x53, 0xe1, 0x55,
	0x84, 0xa6, 0x30, 0xc8, 0x70, 0x9e, 0xff, 0xce, 0x45, 0xe4, 0xb7, 0x74, 0xa6, 0x8e, 0xd1, 0x39,
	0xb8, 0x19, 0x8f, 0x19, 0xa1, 0x9b, 0x14, 0x27, 0xd4, 0x6f, 0xeb, 0x34, 0x18, 0xe8, 0x2d, 0x4e,
	0x68, 0x83, 0x20, 0xcb, 0x8c, 0xfa, 0x9d, 0x26, 0xe1, 0x5d, 0x99, 0x35, 0x09, 0x84, 0xc9, 0xd2,
	0xef, 0x36, 0x09, 0x4b, 0x26, 0xcb, 0x06, 0x21, 0xa2, 0x99, 0xf4, 0x7b, 0x4d, 0xc2, 0x25, 0xcd,
	0x24, 0x7a, 0x0d, 0x63, 0x4b, 0xc8, 0x25, 0x96, 0x8c, 0xa7, 0x7e, 0x5f, 0x73, 0x46, 0x06, 0x5d,
	0x1b, 0x10, 0x7d, 0x0e, 0xa7, 0x96, 0x96, 0x71, 0x21, 0x05, 0x66, 0xd2, 0x1f, 0xcc, 0x9c, 0xb9,
	0x17, 0xda, 0xea, 0x95, 0x45, 0x83, 0xaf, 0xc1, 0xab, 0xa5, 0xc9, 0xe2, 0x52, 0xed, 0x4f, 0x04,
	0xc5, 0x92, 0x6e, 0xf2, 0x82, 0x10, 0x9a, 0xe7, 0x5a, 0x9f, 0x41, 0x38, 0x32, 0xe8, 0xda, 0x80,
	0xc1, 0x12, 0xbc, 0x6b, 0x7e, 0xcb, 0xd2, 0xa7, 0xe8, 0x19, 0xfc, 0xd9, 0x02, 0xb0, 0xbb, 0xa8,
	0xd6, 0xaf, 0x60, 0x14, 0xab, 0xe8, 0xa0, 0xb3, 0xa7, 0x41, 0xdb, 0xf8, 0x70, 0x06, 0xad, 0x87,
	0x66, 0xd0, 0x7e, 0x68, 0x06, 0x9d, 0x87, 0x66, 0xd0, 0x7d, 0xc4, 0x0c, 0x7a, 0x8f, 0x9c, 0x41,
	0xff, 0xe8, 0x0c, 0xfe, 0xee, 0xc0, 0xe8, 0x9d, 0xb6, 0xea, 0x25, 0x95, 0x98, 0xc5, 0x39, 0xfa,
	0x14, 0x86, 0xc6, 0xbb, 0x95, 0xa0, 0xed, 0x70, 0x60, 0x80, 0xab, 0xa8, 0xa9, 0x75, 0x6b, 0x4f,
	0xeb, 0x73, 0x70, 0xd5, 0xbe, 0x69, 0x4e, 0x37, 0x69, 0x91, 0x54, 0x3f, 0xdd, 0x42, 0x6f, 0x8b,
	0x44, 0x2b, 0x6c, 0x09, 0x84, 0xc7, 0x5c, 0xd8, 0x1f, 0xef, 0x59, 0x70, 0xa9, 0x30, 0x75, 0xec,
	0x1d, 0x49, 0x08, 0x4a, 0x8c, 0x04, 0x83, 0x70, 0x5c, 0xd3, 0x34, 0x8a, 0x5e, 0x82, 0x77, 0x47,
	0xb7, 0x8c, 0xc4, 0x56, 0x6a, 0x23, 0x82, 0x6b, 0x31, 0xad, 0xf5, 0x2b, 0x18, 0x55, 0x14, 0xd3,
	0xd0, 0x98, 0xb5, 0xaa, 0x33, 0x0d, 0x11, 0x74, 0x4a, 0x8a, 0x85, 0x36, 0x68, 0x37, 0xd4, 0x6b,
	0xf4, 0x1c, 0xba, 0x09, 0x4f, 0xe5, 0xd6, 0x1f, 0x6a, 0xd0, 0x04, 0x68, 0x02, 0xed, 0x08, 0x97,
	0x3e, 0x68, 0x4c, 0x2d, 0x55, 0xed, 0x96, 0x17, 0xc2, 0x77, 0x4d, 0xad, 0x5a, 0xa3, 0x17, 0xd0,
	0x4b, 0x58, 0x5a, 0x48, 0xea, 0x7b, 0x1a, 0xb5, 0x11, 0xf2, 0xa1, 0x8f, 0xa3, 0x48, 0x28, 0x67,
	0x8d, 0xf4, 0x31, 0xaa, 0x10, 0x7d, 0x06, 0xc3, 0x98, 0xa7, 0xb7, 0x4c, 0x16, 0x11, 0xf5, 0xc7,
	0x33, 0x67, 0xee, 0x84, 0x3b, 0x40, 0x59, 0x38, 0xc6, 0xd2, 0x24, 0x4f, 0x75, 0xb2, 0x8e, 0xd5,
	0xa0, 0x12, 0x9c, 0x6d, 0x58, 0x82, 0x6f, 0xa9, 0x3f, 0xd1, 0xd3, 0x1d, 0x24, 0x38, 0xbb, 0x52,
	0xb1, 0x4a, 0xde, 0x60, 0x61, 0x93, 0x67, 0x26, 0x79, 0x83, 0x85, 0x49, 0x9e, 0x83, 0x4b, 0x62,
	0x9e, 0x53, 0x9b, 0x46, 0x3a, 0x0d, 0x1a, 0x32, 0x84, 0x97, 0xd5, 0x6b, 0x66, 0x19, 0xcf, 0x34,
	0xc3, 0xb5, 0x36, 0x50, 0x50, 0xf0, 0x15, 0xb8, 0x21, 0x25, 0x5c, 0x44, 0xf5, 0xdd, 0x15, 0x3a,
	0x3c, 0xbc, 0xbb, 0x06, 0xad, 0xee, 0x6e, 0x00, 0xe3, 0x55, 0x11, 0xc7, 0xd7, 0x9c, 0x54, 0xb7,
	0x77, 0x02, 0xed, 0xa4, 0xbe, 0xb9, 0x6a, 0x19, 0xbc, 0x86, 0x33, 0xc5, 0x31, 0xae, 0xfc, 0x6f,
	0xda, 0x2f, 0x30, 0x58, 0xc7, 0xf8, 0x8e, 0x5e, 0x73, 0xa2, 0xb2, 0xf9, 0x2e, 0x9b, 0xb3, 0x68,
	0x5f, 0xd6, 0xd6, 0xff, 0xc9, 0xda, 0xde, 0x97, 0x35, 0x58, 0x80, 0xfb, 0x13, 0xce, 0x25, 0x15,
	0x3f, 0x8b, 0x88, 0x8a, 0xfb, 0x8d, 0x95, 0x38, 0x89, 0x26, 0x6c, 0xb8, 0x62, 0xd8, 0x8b, 0xe0,
	0x26, 0xbb, 0xa2, 0x2f, 0xfe, 0xe9, 0x40, 0xcf, 0x9c, 0x1f, 0x5d, 0x02, 0x0a, 0xb7, 0x2c, 0xe5,
	0x4b, 0xfd, 0x86, 0xd9, 0xf7, 0x0e, 0xbd, 0xb8, 0xb0, 0xff, 0x16, 0xfb, 0xff, 0x0d, 0xd3, 0xe7,
	0xf7, 0xf0, 0x2c, 0x2e, 0x83, 0x13, 0xf4, 0x1d, 0x80, 0xde, 0x45, 0x3f, 0x59, 0xa8, 0x66, 0x35,
	0xdf, 0xc1, 0x29, 0x3a, 0x40, 0x4d, 0xe5, 0x12, 0xce, 0x7e, 0xc4, 0x82, 0x3e, 0xad, 0xfd, 0xb7,
	0x30, 0x54, 0x9b, 0x7c, 0x78, 0xf7, 0xef, 0xc1, 0x33, 0x2e, 0xb1, 0x6a, 0x7c, 0x54, 0xb1, 0xf6,
	0xde, 0x9c, 0xe9, 0xb3, 0x0a, 0x6e, 0x58, 0x2a, 0x38, 0x41, 0xdf, 0x80, 0xab, 0x47, 0xbc, 0x2e,
	0xde, 0x27, 0x4c, 0xa2, 0x49, 0xc5, 0xaa, 0xe6, 0xbe, 0xab, 0x6b, 0x4c, 0x4c, 0x77, 0x1d, 0x19,
	0x20, 0xa4, 0x84, 0xb2, 0x3b, 0x8a, 0x8e, 0xf1, 0xa6, 0xf7, 0xb6, 0x0b, 0x4e, 0xe6, 0xce, 0x1b,
	0x47, 0x9d, 0xd9, 0x7a, 0xd4, 0xbc, 0xa5, 0xb5, 0x58, 0xfb, 0xce, 0x3d, 0x56, 0xff, 0xc6, 0x41,
	0x0b, 0x80, 0x9d, 0x7b, 0xd1, 0x27, 0xcd, 0xda, 0x3d, 0x47, 0x4f, 0x8f, 0x4b, 0xa1, 0xf6, 0x58,
	0xcc, 0xe0, 0x94, 0xf1, 0x0b, 0xb2, 0x65, 0x7f, 0x30, 0x4b, 0x5a, 0xb8, 0x86, 0xb5, 0x52, 0x1f,
	0x17, 0x2b, 0xe7, 0x7d, 0x4f, 0x7f, 0x65, 0x7c, 0xf9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0xa6, 0x4e, 0x42, 0x75, 0x08, 0x00, 0x00,
}
