// Code generated by protoc-gen-go.
// source: ticket.proto
// DO NOT EDIT!

/*
Package ticket is a generated protocol buffer package.

It is generated from these files:
	ticket.proto

It has these top-level messages:
	AccountRequest
	AccountReply
	LoginRequest
	LoginReply
	HareRequest
	HareAllRequest
	HareProfiles
	PasswordRequest
	TicketDetails
	RecordReply
	TicketStats
	PullLocRequest
	PullPerformanceRequest
	PullAnchorRequest
	PullTicketStatsRequest
	PullTicketsRequest
	SlaveLoc
	SlaveNameLoc
	SlavePerformance
	MasterOrder
	SlaveAnchors
	TicketRange
	TicketRangeReply
	TicketRangeSid
	LogoutRequest
	LogoutReply
*/
package ticket

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountRequest struct {
	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Password       string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	PoliceName     string `protobuf:"bytes,3,opt,name=police_name,json=policeName" json:"police_name,omitempty"`
	PoliceType     string `protobuf:"bytes,4,opt,name=police_type,json=policeType" json:"police_type,omitempty"`
	PoliceCity     string `protobuf:"bytes,5,opt,name=police_city,json=policeCity" json:"police_city,omitempty"`
	PoliceDept     string `protobuf:"bytes,6,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
	PoliceSquad    string `protobuf:"bytes,7,opt,name=police_squad,json=policeSquad" json:"police_squad,omitempty"`
	PoliceSection  string `protobuf:"bytes,8,opt,name=police_section,json=policeSection" json:"police_section,omitempty"`
	PolicePortrait []byte `protobuf:"bytes,9,opt,name=police_portrait,json=policePortrait,proto3" json:"police_portrait,omitempty"`
}

func (m *AccountRequest) Reset()                    { *m = AccountRequest{} }
func (m *AccountRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()               {}
func (*AccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AccountRequest) GetPoliceName() string {
	if m != nil {
		return m.PoliceName
	}
	return ""
}

func (m *AccountRequest) GetPoliceType() string {
	if m != nil {
		return m.PoliceType
	}
	return ""
}

func (m *AccountRequest) GetPoliceCity() string {
	if m != nil {
		return m.PoliceCity
	}
	return ""
}

func (m *AccountRequest) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

func (m *AccountRequest) GetPoliceSquad() string {
	if m != nil {
		return m.PoliceSquad
	}
	return ""
}

func (m *AccountRequest) GetPoliceSection() string {
	if m != nil {
		return m.PoliceSection
	}
	return ""
}

func (m *AccountRequest) GetPolicePortrait() []byte {
	if m != nil {
		return m.PolicePortrait
	}
	return nil
}

type AccountReply struct {
	CreateSuccess bool `protobuf:"varint,1,opt,name=create_success,json=createSuccess" json:"create_success,omitempty"`
}

func (m *AccountReply) Reset()                    { *m = AccountReply{} }
func (m *AccountReply) String() string            { return proto.CompactTextString(m) }
func (*AccountReply) ProtoMessage()               {}
func (*AccountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountReply) GetCreateSuccess() bool {
	if m != nil {
		return m.CreateSuccess
	}
	return false
}

type LoginRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginReply struct {
	LoginSuccess   bool   `protobuf:"varint,1,opt,name=login_success,json=loginSuccess" json:"login_success,omitempty"`
	PoliceName     string `protobuf:"bytes,2,opt,name=police_name,json=policeName" json:"police_name,omitempty"`
	PoliceType     string `protobuf:"bytes,3,opt,name=police_type,json=policeType" json:"police_type,omitempty"`
	PoliceCity     string `protobuf:"bytes,4,opt,name=police_city,json=policeCity" json:"police_city,omitempty"`
	PoliceDept     string `protobuf:"bytes,5,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
	PoliceSquad    string `protobuf:"bytes,6,opt,name=police_squad,json=policeSquad" json:"police_squad,omitempty"`
	PoliceSection  string `protobuf:"bytes,7,opt,name=police_section,json=policeSection" json:"police_section,omitempty"`
	PolicePortrait []byte `protobuf:"bytes,8,opt,name=police_portrait,json=policePortrait,proto3" json:"police_portrait,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginReply) GetLoginSuccess() bool {
	if m != nil {
		return m.LoginSuccess
	}
	return false
}

func (m *LoginReply) GetPoliceName() string {
	if m != nil {
		return m.PoliceName
	}
	return ""
}

func (m *LoginReply) GetPoliceType() string {
	if m != nil {
		return m.PoliceType
	}
	return ""
}

func (m *LoginReply) GetPoliceCity() string {
	if m != nil {
		return m.PoliceCity
	}
	return ""
}

func (m *LoginReply) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

func (m *LoginReply) GetPoliceSquad() string {
	if m != nil {
		return m.PoliceSquad
	}
	return ""
}

func (m *LoginReply) GetPoliceSection() string {
	if m != nil {
		return m.PoliceSection
	}
	return ""
}

func (m *LoginReply) GetPolicePortrait() []byte {
	if m != nil {
		return m.PolicePortrait
	}
	return nil
}

type HareRequest struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *HareRequest) Reset()                    { *m = HareRequest{} }
func (m *HareRequest) String() string            { return proto.CompactTextString(m) }
func (*HareRequest) ProtoMessage()               {}
func (*HareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HareRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type HareAllRequest struct {
	Mid string `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
}

func (m *HareAllRequest) Reset()                    { *m = HareAllRequest{} }
func (m *HareAllRequest) String() string            { return proto.CompactTextString(m) }
func (*HareAllRequest) ProtoMessage()               {}
func (*HareAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HareAllRequest) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

type HareProfiles struct {
	HareSuccess     bool   `protobuf:"varint,1,opt,name=hare_success,json=hareSuccess" json:"hare_success,omitempty"`
	UserId          string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PoliceName      string `protobuf:"bytes,3,opt,name=police_name,json=policeName" json:"police_name,omitempty"`
	PoliceType      string `protobuf:"bytes,4,opt,name=police_type,json=policeType" json:"police_type,omitempty"`
	PoliceCity      string `protobuf:"bytes,5,opt,name=police_city,json=policeCity" json:"police_city,omitempty"`
	PoliceDept      string `protobuf:"bytes,6,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
	PoliceSquad     string `protobuf:"bytes,7,opt,name=police_squad,json=policeSquad" json:"police_squad,omitempty"`
	PoliceSection   string `protobuf:"bytes,8,opt,name=police_section,json=policeSection" json:"police_section,omitempty"`
	PolicePortrait  []byte `protobuf:"bytes,9,opt,name=police_portrait,json=policePortrait,proto3" json:"police_portrait,omitempty"`
	PoliceThumbnail []byte `protobuf:"bytes,10,opt,name=police_thumbnail,json=policeThumbnail,proto3" json:"police_thumbnail,omitempty"`
}

func (m *HareProfiles) Reset()                    { *m = HareProfiles{} }
func (m *HareProfiles) String() string            { return proto.CompactTextString(m) }
func (*HareProfiles) ProtoMessage()               {}
func (*HareProfiles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HareProfiles) GetHareSuccess() bool {
	if m != nil {
		return m.HareSuccess
	}
	return false
}

func (m *HareProfiles) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *HareProfiles) GetPoliceName() string {
	if m != nil {
		return m.PoliceName
	}
	return ""
}

func (m *HareProfiles) GetPoliceType() string {
	if m != nil {
		return m.PoliceType
	}
	return ""
}

func (m *HareProfiles) GetPoliceCity() string {
	if m != nil {
		return m.PoliceCity
	}
	return ""
}

func (m *HareProfiles) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

func (m *HareProfiles) GetPoliceSquad() string {
	if m != nil {
		return m.PoliceSquad
	}
	return ""
}

func (m *HareProfiles) GetPoliceSection() string {
	if m != nil {
		return m.PoliceSection
	}
	return ""
}

func (m *HareProfiles) GetPolicePortrait() []byte {
	if m != nil {
		return m.PolicePortrait
	}
	return nil
}

func (m *HareProfiles) GetPoliceThumbnail() []byte {
	if m != nil {
		return m.PoliceThumbnail
	}
	return nil
}

type PasswordRequest struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
}

func (m *PasswordRequest) Reset()                    { *m = PasswordRequest{} }
func (m *PasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*PasswordRequest) ProtoMessage()               {}
func (*PasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PasswordRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *PasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type TicketDetails struct {
	TicketId     int64   `protobuf:"varint,1,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	UserId       string  `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	LicenseNum   string  `protobuf:"bytes,3,opt,name=license_num,json=licenseNum" json:"license_num,omitempty"`
	LicenseColor string  `protobuf:"bytes,4,opt,name=license_color,json=licenseColor" json:"license_color,omitempty"`
	VehicleType  string  `protobuf:"bytes,5,opt,name=vehicle_type,json=vehicleType" json:"vehicle_type,omitempty"`
	VehicleColor string  `protobuf:"bytes,6,opt,name=vehicle_color,json=vehicleColor" json:"vehicle_color,omitempty"`
	Year         int32   `protobuf:"varint,7,opt,name=year" json:"year,omitempty"`
	Month        int32   `protobuf:"varint,8,opt,name=month" json:"month,omitempty"`
	Week         int32   `protobuf:"varint,9,opt,name=week" json:"week,omitempty"`
	Day          int32   `protobuf:"varint,10,opt,name=day" json:"day,omitempty"`
	Hour         int32   `protobuf:"varint,11,opt,name=hour" json:"hour,omitempty"`
	Minute       int32   `protobuf:"varint,12,opt,name=minute" json:"minute,omitempty"`
	TicketTime   int64   `protobuf:"varint,13,opt,name=ticket_time,json=ticketTime" json:"ticket_time,omitempty"`
	Address      string  `protobuf:"bytes,14,opt,name=address" json:"address,omitempty"`
	Longitude    float64 `protobuf:"fixed64,15,opt,name=longitude" json:"longitude,omitempty"`
	Latitude     float64 `protobuf:"fixed64,16,opt,name=latitude" json:"latitude,omitempty"`
	MapImage     []byte  `protobuf:"bytes,17,opt,name=map_image,json=mapImage,proto3" json:"map_image,omitempty"`
	FarImage     []byte  `protobuf:"bytes,18,opt,name=far_image,json=farImage,proto3" json:"far_image,omitempty"`
	CloseImage   []byte  `protobuf:"bytes,19,opt,name=close_image,json=closeImage,proto3" json:"close_image,omitempty"`
	TicketImage  []byte  `protobuf:"bytes,20,opt,name=ticket_image,json=ticketImage,proto3" json:"ticket_image,omitempty"`
	IsUploaded   bool    `protobuf:"varint,21,opt,name=is_uploaded,json=isUploaded" json:"is_uploaded,omitempty"`
}

func (m *TicketDetails) Reset()                    { *m = TicketDetails{} }
func (m *TicketDetails) String() string            { return proto.CompactTextString(m) }
func (*TicketDetails) ProtoMessage()               {}
func (*TicketDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TicketDetails) GetTicketId() int64 {
	if m != nil {
		return m.TicketId
	}
	return 0
}

func (m *TicketDetails) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TicketDetails) GetLicenseNum() string {
	if m != nil {
		return m.LicenseNum
	}
	return ""
}

func (m *TicketDetails) GetLicenseColor() string {
	if m != nil {
		return m.LicenseColor
	}
	return ""
}

func (m *TicketDetails) GetVehicleType() string {
	if m != nil {
		return m.VehicleType
	}
	return ""
}

func (m *TicketDetails) GetVehicleColor() string {
	if m != nil {
		return m.VehicleColor
	}
	return ""
}

func (m *TicketDetails) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *TicketDetails) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *TicketDetails) GetWeek() int32 {
	if m != nil {
		return m.Week
	}
	return 0
}

func (m *TicketDetails) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *TicketDetails) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *TicketDetails) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *TicketDetails) GetTicketTime() int64 {
	if m != nil {
		return m.TicketTime
	}
	return 0
}

func (m *TicketDetails) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TicketDetails) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *TicketDetails) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *TicketDetails) GetMapImage() []byte {
	if m != nil {
		return m.MapImage
	}
	return nil
}

func (m *TicketDetails) GetFarImage() []byte {
	if m != nil {
		return m.FarImage
	}
	return nil
}

func (m *TicketDetails) GetCloseImage() []byte {
	if m != nil {
		return m.CloseImage
	}
	return nil
}

func (m *TicketDetails) GetTicketImage() []byte {
	if m != nil {
		return m.TicketImage
	}
	return nil
}

func (m *TicketDetails) GetIsUploaded() bool {
	if m != nil {
		return m.IsUploaded
	}
	return false
}

type RecordReply struct {
	RecordSuccess bool `protobuf:"varint,1,opt,name=record_success,json=recordSuccess" json:"record_success,omitempty"`
}

func (m *RecordReply) Reset()                    { *m = RecordReply{} }
func (m *RecordReply) String() string            { return proto.CompactTextString(m) }
func (*RecordReply) ProtoMessage()               {}
func (*RecordReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RecordReply) GetRecordSuccess() bool {
	if m != nil {
		return m.RecordSuccess
	}
	return false
}

type TicketStats struct {
	Sid                 string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	SavedTicketCount    int32  `protobuf:"varint,2,opt,name=saved_ticket_count,json=savedTicketCount" json:"saved_ticket_count,omitempty"`
	UploadedTicketCount int32  `protobuf:"varint,3,opt,name=uploaded_ticket_count,json=uploadedTicketCount" json:"uploaded_ticket_count,omitempty"`
}

func (m *TicketStats) Reset()                    { *m = TicketStats{} }
func (m *TicketStats) String() string            { return proto.CompactTextString(m) }
func (*TicketStats) ProtoMessage()               {}
func (*TicketStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TicketStats) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *TicketStats) GetSavedTicketCount() int32 {
	if m != nil {
		return m.SavedTicketCount
	}
	return 0
}

func (m *TicketStats) GetUploadedTicketCount() int32 {
	if m != nil {
		return m.UploadedTicketCount
	}
	return 0
}

type PullLocRequest struct {
	PoliceDept string `protobuf:"bytes,1,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
}

func (m *PullLocRequest) Reset()                    { *m = PullLocRequest{} }
func (m *PullLocRequest) String() string            { return proto.CompactTextString(m) }
func (*PullLocRequest) ProtoMessage()               {}
func (*PullLocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PullLocRequest) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

type PullPerformanceRequest struct {
	PoliceDept string `protobuf:"bytes,1,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
}

func (m *PullPerformanceRequest) Reset()                    { *m = PullPerformanceRequest{} }
func (m *PullPerformanceRequest) String() string            { return proto.CompactTextString(m) }
func (*PullPerformanceRequest) ProtoMessage()               {}
func (*PullPerformanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PullPerformanceRequest) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

type PullAnchorRequest struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *PullAnchorRequest) Reset()                    { *m = PullAnchorRequest{} }
func (m *PullAnchorRequest) String() string            { return proto.CompactTextString(m) }
func (*PullAnchorRequest) ProtoMessage()               {}
func (*PullAnchorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PullAnchorRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type PullTicketStatsRequest struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *PullTicketStatsRequest) Reset()                    { *m = PullTicketStatsRequest{} }
func (m *PullTicketStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*PullTicketStatsRequest) ProtoMessage()               {}
func (*PullTicketStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PullTicketStatsRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type PullTicketsRequest struct {
	Sid      string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Year     int32  `protobuf:"varint,2,opt,name=year" json:"year,omitempty"`
	Week     int32  `protobuf:"varint,3,opt,name=week" json:"week,omitempty"`
	LastTime int64  `protobuf:"varint,4,opt,name=last_time,json=lastTime" json:"last_time,omitempty"`
}

func (m *PullTicketsRequest) Reset()                    { *m = PullTicketsRequest{} }
func (m *PullTicketsRequest) String() string            { return proto.CompactTextString(m) }
func (*PullTicketsRequest) ProtoMessage()               {}
func (*PullTicketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PullTicketsRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *PullTicketsRequest) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *PullTicketsRequest) GetWeek() int32 {
	if m != nil {
		return m.Week
	}
	return 0
}

func (m *PullTicketsRequest) GetLastTime() int64 {
	if m != nil {
		return m.LastTime
	}
	return 0
}

type SlaveLoc struct {
	Sid        string  `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	PoliceDept string  `protobuf:"bytes,2,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
	Longitude  float64 `protobuf:"fixed64,3,opt,name=longitude" json:"longitude,omitempty"`
	Latitude   float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *SlaveLoc) Reset()                    { *m = SlaveLoc{} }
func (m *SlaveLoc) String() string            { return proto.CompactTextString(m) }
func (*SlaveLoc) ProtoMessage()               {}
func (*SlaveLoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SlaveLoc) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SlaveLoc) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

func (m *SlaveLoc) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *SlaveLoc) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

type SlaveNameLoc struct {
	Sid        string  `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	PoliceName string  `protobuf:"bytes,2,opt,name=police_name,json=policeName" json:"police_name,omitempty"`
	Longitude  float64 `protobuf:"fixed64,3,opt,name=longitude" json:"longitude,omitempty"`
	Latitude   float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *SlaveNameLoc) Reset()                    { *m = SlaveNameLoc{} }
func (m *SlaveNameLoc) String() string            { return proto.CompactTextString(m) }
func (*SlaveNameLoc) ProtoMessage()               {}
func (*SlaveNameLoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SlaveNameLoc) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SlaveNameLoc) GetPoliceName() string {
	if m != nil {
		return m.PoliceName
	}
	return ""
}

func (m *SlaveNameLoc) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *SlaveNameLoc) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

type SlavePerformance struct {
	Sid                 string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	PoliceName          string `protobuf:"bytes,2,opt,name=police_name,json=policeName" json:"police_name,omitempty"`
	PoliceDept          string `protobuf:"bytes,3,opt,name=police_dept,json=policeDept" json:"police_dept,omitempty"`
	SavedTicketCount    int32  `protobuf:"varint,4,opt,name=saved_ticket_count,json=savedTicketCount" json:"saved_ticket_count,omitempty"`
	UploadedTicketCount int32  `protobuf:"varint,5,opt,name=uploaded_ticket_count,json=uploadedTicketCount" json:"uploaded_ticket_count,omitempty"`
	TicketCountDay      int32  `protobuf:"varint,6,opt,name=ticket_count_day,json=ticketCountDay" json:"ticket_count_day,omitempty"`
	TicketCountWeek     int32  `protobuf:"varint,7,opt,name=ticket_count_week,json=ticketCountWeek" json:"ticket_count_week,omitempty"`
	TicketCountMonth    int32  `protobuf:"varint,8,opt,name=ticket_count_month,json=ticketCountMonth" json:"ticket_count_month,omitempty"`
}

func (m *SlavePerformance) Reset()                    { *m = SlavePerformance{} }
func (m *SlavePerformance) String() string            { return proto.CompactTextString(m) }
func (*SlavePerformance) ProtoMessage()               {}
func (*SlavePerformance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SlavePerformance) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SlavePerformance) GetPoliceName() string {
	if m != nil {
		return m.PoliceName
	}
	return ""
}

func (m *SlavePerformance) GetPoliceDept() string {
	if m != nil {
		return m.PoliceDept
	}
	return ""
}

func (m *SlavePerformance) GetSavedTicketCount() int32 {
	if m != nil {
		return m.SavedTicketCount
	}
	return 0
}

func (m *SlavePerformance) GetUploadedTicketCount() int32 {
	if m != nil {
		return m.UploadedTicketCount
	}
	return 0
}

func (m *SlavePerformance) GetTicketCountDay() int32 {
	if m != nil {
		return m.TicketCountDay
	}
	return 0
}

func (m *SlavePerformance) GetTicketCountWeek() int32 {
	if m != nil {
		return m.TicketCountWeek
	}
	return 0
}

func (m *SlavePerformance) GetTicketCountMonth() int32 {
	if m != nil {
		return m.TicketCountMonth
	}
	return 0
}

type MasterOrder struct {
	Mid         string `protobuf:"bytes,1,opt,name=mid" json:"mid,omitempty"`
	MasterOrder string `protobuf:"bytes,2,opt,name=master_order,json=masterOrder" json:"master_order,omitempty"`
}

func (m *MasterOrder) Reset()                    { *m = MasterOrder{} }
func (m *MasterOrder) String() string            { return proto.CompactTextString(m) }
func (*MasterOrder) ProtoMessage()               {}
func (*MasterOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MasterOrder) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *MasterOrder) GetMasterOrder() string {
	if m != nil {
		return m.MasterOrder
	}
	return ""
}

type SlaveAnchors struct {
	Sid         string  `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	AnchorCount int32   `protobuf:"varint,2,opt,name=anchor_count,json=anchorCount" json:"anchor_count,omitempty"`
	Anchor0Lng  float64 `protobuf:"fixed64,3,opt,name=anchor0_lng,json=anchor0Lng" json:"anchor0_lng,omitempty"`
	Anchor0Lat  float64 `protobuf:"fixed64,4,opt,name=anchor0_lat,json=anchor0Lat" json:"anchor0_lat,omitempty"`
	Anchor1Lng  float64 `protobuf:"fixed64,5,opt,name=anchor1_lng,json=anchor1Lng" json:"anchor1_lng,omitempty"`
	Anchor1Lat  float64 `protobuf:"fixed64,6,opt,name=anchor1_lat,json=anchor1Lat" json:"anchor1_lat,omitempty"`
	Anchor2Lng  float64 `protobuf:"fixed64,7,opt,name=anchor2_lng,json=anchor2Lng" json:"anchor2_lng,omitempty"`
	Anchor2Lat  float64 `protobuf:"fixed64,8,opt,name=anchor2_lat,json=anchor2Lat" json:"anchor2_lat,omitempty"`
	Anchor3Lng  float64 `protobuf:"fixed64,9,opt,name=anchor3_lng,json=anchor3Lng" json:"anchor3_lng,omitempty"`
	Anchor3Lat  float64 `protobuf:"fixed64,10,opt,name=anchor3_lat,json=anchor3Lat" json:"anchor3_lat,omitempty"`
	Anchor4Lng  float64 `protobuf:"fixed64,11,opt,name=anchor4_lng,json=anchor4Lng" json:"anchor4_lng,omitempty"`
	Anchor4Lat  float64 `protobuf:"fixed64,12,opt,name=anchor4_lat,json=anchor4Lat" json:"anchor4_lat,omitempty"`
	Anchor5Lng  float64 `protobuf:"fixed64,13,opt,name=anchor5_lng,json=anchor5Lng" json:"anchor5_lng,omitempty"`
	Anchor5Lat  float64 `protobuf:"fixed64,14,opt,name=anchor5_lat,json=anchor5Lat" json:"anchor5_lat,omitempty"`
}

func (m *SlaveAnchors) Reset()                    { *m = SlaveAnchors{} }
func (m *SlaveAnchors) String() string            { return proto.CompactTextString(m) }
func (*SlaveAnchors) ProtoMessage()               {}
func (*SlaveAnchors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SlaveAnchors) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SlaveAnchors) GetAnchorCount() int32 {
	if m != nil {
		return m.AnchorCount
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor0Lng() float64 {
	if m != nil {
		return m.Anchor0Lng
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor0Lat() float64 {
	if m != nil {
		return m.Anchor0Lat
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor1Lng() float64 {
	if m != nil {
		return m.Anchor1Lng
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor1Lat() float64 {
	if m != nil {
		return m.Anchor1Lat
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor2Lng() float64 {
	if m != nil {
		return m.Anchor2Lng
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor2Lat() float64 {
	if m != nil {
		return m.Anchor2Lat
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor3Lng() float64 {
	if m != nil {
		return m.Anchor3Lng
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor3Lat() float64 {
	if m != nil {
		return m.Anchor3Lat
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor4Lng() float64 {
	if m != nil {
		return m.Anchor4Lng
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor4Lat() float64 {
	if m != nil {
		return m.Anchor4Lat
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor5Lng() float64 {
	if m != nil {
		return m.Anchor5Lng
	}
	return 0
}

func (m *SlaveAnchors) GetAnchor5Lat() float64 {
	if m != nil {
		return m.Anchor5Lat
	}
	return 0
}

type TicketRange struct {
	TicketIdStart int64 `protobuf:"varint,1,opt,name=ticket_id_start,json=ticketIdStart" json:"ticket_id_start,omitempty"`
	TicketIdEnd   int64 `protobuf:"varint,2,opt,name=ticket_id_end,json=ticketIdEnd" json:"ticket_id_end,omitempty"`
}

func (m *TicketRange) Reset()                    { *m = TicketRange{} }
func (m *TicketRange) String() string            { return proto.CompactTextString(m) }
func (*TicketRange) ProtoMessage()               {}
func (*TicketRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *TicketRange) GetTicketIdStart() int64 {
	if m != nil {
		return m.TicketIdStart
	}
	return 0
}

func (m *TicketRange) GetTicketIdEnd() int64 {
	if m != nil {
		return m.TicketIdEnd
	}
	return 0
}

type TicketRangeReply struct {
	RangeSuccess bool `protobuf:"varint,1,opt,name=range_success,json=rangeSuccess" json:"range_success,omitempty"`
}

func (m *TicketRangeReply) Reset()                    { *m = TicketRangeReply{} }
func (m *TicketRangeReply) String() string            { return proto.CompactTextString(m) }
func (*TicketRangeReply) ProtoMessage()               {}
func (*TicketRangeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *TicketRangeReply) GetRangeSuccess() bool {
	if m != nil {
		return m.RangeSuccess
	}
	return false
}

type TicketRangeSid struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *TicketRangeSid) Reset()                    { *m = TicketRangeSid{} }
func (m *TicketRangeSid) String() string            { return proto.CompactTextString(m) }
func (*TicketRangeSid) ProtoMessage()               {}
func (*TicketRangeSid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TicketRangeSid) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type LogoutRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *LogoutRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type LogoutReply struct {
	LogoutSuccess bool `protobuf:"varint,1,opt,name=logout_success,json=logoutSuccess" json:"logout_success,omitempty"`
}

func (m *LogoutReply) Reset()                    { *m = LogoutReply{} }
func (m *LogoutReply) String() string            { return proto.CompactTextString(m) }
func (*LogoutReply) ProtoMessage()               {}
func (*LogoutReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *LogoutReply) GetLogoutSuccess() bool {
	if m != nil {
		return m.LogoutSuccess
	}
	return false
}

func init() {
	proto.RegisterType((*AccountRequest)(nil), "ticket.AccountRequest")
	proto.RegisterType((*AccountReply)(nil), "ticket.AccountReply")
	proto.RegisterType((*LoginRequest)(nil), "ticket.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "ticket.LoginReply")
	proto.RegisterType((*HareRequest)(nil), "ticket.HareRequest")
	proto.RegisterType((*HareAllRequest)(nil), "ticket.HareAllRequest")
	proto.RegisterType((*HareProfiles)(nil), "ticket.HareProfiles")
	proto.RegisterType((*PasswordRequest)(nil), "ticket.PasswordRequest")
	proto.RegisterType((*TicketDetails)(nil), "ticket.TicketDetails")
	proto.RegisterType((*RecordReply)(nil), "ticket.RecordReply")
	proto.RegisterType((*TicketStats)(nil), "ticket.TicketStats")
	proto.RegisterType((*PullLocRequest)(nil), "ticket.PullLocRequest")
	proto.RegisterType((*PullPerformanceRequest)(nil), "ticket.PullPerformanceRequest")
	proto.RegisterType((*PullAnchorRequest)(nil), "ticket.PullAnchorRequest")
	proto.RegisterType((*PullTicketStatsRequest)(nil), "ticket.PullTicketStatsRequest")
	proto.RegisterType((*PullTicketsRequest)(nil), "ticket.PullTicketsRequest")
	proto.RegisterType((*SlaveLoc)(nil), "ticket.SlaveLoc")
	proto.RegisterType((*SlaveNameLoc)(nil), "ticket.SlaveNameLoc")
	proto.RegisterType((*SlavePerformance)(nil), "ticket.SlavePerformance")
	proto.RegisterType((*MasterOrder)(nil), "ticket.MasterOrder")
	proto.RegisterType((*SlaveAnchors)(nil), "ticket.SlaveAnchors")
	proto.RegisterType((*TicketRange)(nil), "ticket.TicketRange")
	proto.RegisterType((*TicketRangeReply)(nil), "ticket.TicketRangeReply")
	proto.RegisterType((*TicketRangeSid)(nil), "ticket.TicketRangeSid")
	proto.RegisterType((*LogoutRequest)(nil), "ticket.LogoutRequest")
	proto.RegisterType((*LogoutReply)(nil), "ticket.LogoutReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ticket service

type TicketClient interface {
	RhinoCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	RhinoLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	RhinoChangePassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*LoginReply, error)
	PullHareOne(ctx context.Context, in *HareRequest, opts ...grpc.CallOption) (*HareProfiles, error)
	PullHareAll(ctx context.Context, in *HareAllRequest, opts ...grpc.CallOption) (Ticket_PullHareAllClient, error)
	HareCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error)
	HareLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	HareChangePassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*LoginReply, error)
	RecordTicket(ctx context.Context, in *TicketDetails, opts ...grpc.CallOption) (*RecordReply, error)
	SlaveLocSubmit(ctx context.Context, in *SlaveLoc, opts ...grpc.CallOption) (*MasterOrder, error)
	PullLocation(ctx context.Context, in *PullLocRequest, opts ...grpc.CallOption) (Ticket_PullLocationClient, error)
	PullAnchors(ctx context.Context, in *PullAnchorRequest, opts ...grpc.CallOption) (Ticket_PullAnchorsClient, error)
	PullPerformance(ctx context.Context, in *PullPerformanceRequest, opts ...grpc.CallOption) (Ticket_PullPerformanceClient, error)
	PullTicketStats(ctx context.Context, in *PullTicketStatsRequest, opts ...grpc.CallOption) (*TicketStats, error)
	PullTickets(ctx context.Context, in *PullTicketsRequest, opts ...grpc.CallOption) (Ticket_PullTicketsClient, error)
	SetTicketRange(ctx context.Context, in *TicketRange, opts ...grpc.CallOption) (*TicketRangeReply, error)
	PullTicketRange(ctx context.Context, in *TicketRangeSid, opts ...grpc.CallOption) (*TicketRange, error)
	HareLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
}

type ticketClient struct {
	cc *grpc.ClientConn
}

func NewTicketClient(cc *grpc.ClientConn) TicketClient {
	return &ticketClient{cc}
}

func (c *ticketClient) RhinoCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/RhinoCreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) RhinoLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/RhinoLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) RhinoChangePassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/RhinoChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) PullHareOne(ctx context.Context, in *HareRequest, opts ...grpc.CallOption) (*HareProfiles, error) {
	out := new(HareProfiles)
	err := grpc.Invoke(ctx, "/ticket.Ticket/PullHareOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) PullHareAll(ctx context.Context, in *HareAllRequest, opts ...grpc.CallOption) (Ticket_PullHareAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[0], c.cc, "/ticket.Ticket/PullHareAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketPullHareAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticket_PullHareAllClient interface {
	Recv() (*HareProfiles, error)
	grpc.ClientStream
}

type ticketPullHareAllClient struct {
	grpc.ClientStream
}

func (x *ticketPullHareAllClient) Recv() (*HareProfiles, error) {
	m := new(HareProfiles)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketClient) HareCreateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountReply, error) {
	out := new(AccountReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/HareCreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) HareLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/HareLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) HareChangePassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/HareChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) RecordTicket(ctx context.Context, in *TicketDetails, opts ...grpc.CallOption) (*RecordReply, error) {
	out := new(RecordReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/RecordTicket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) SlaveLocSubmit(ctx context.Context, in *SlaveLoc, opts ...grpc.CallOption) (*MasterOrder, error) {
	out := new(MasterOrder)
	err := grpc.Invoke(ctx, "/ticket.Ticket/SlaveLocSubmit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) PullLocation(ctx context.Context, in *PullLocRequest, opts ...grpc.CallOption) (Ticket_PullLocationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[1], c.cc, "/ticket.Ticket/PullLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketPullLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticket_PullLocationClient interface {
	Recv() (*SlaveNameLoc, error)
	grpc.ClientStream
}

type ticketPullLocationClient struct {
	grpc.ClientStream
}

func (x *ticketPullLocationClient) Recv() (*SlaveNameLoc, error) {
	m := new(SlaveNameLoc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketClient) PullAnchors(ctx context.Context, in *PullAnchorRequest, opts ...grpc.CallOption) (Ticket_PullAnchorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[2], c.cc, "/ticket.Ticket/PullAnchors", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketPullAnchorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticket_PullAnchorsClient interface {
	Recv() (*SlaveLoc, error)
	grpc.ClientStream
}

type ticketPullAnchorsClient struct {
	grpc.ClientStream
}

func (x *ticketPullAnchorsClient) Recv() (*SlaveLoc, error) {
	m := new(SlaveLoc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketClient) PullPerformance(ctx context.Context, in *PullPerformanceRequest, opts ...grpc.CallOption) (Ticket_PullPerformanceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[3], c.cc, "/ticket.Ticket/PullPerformance", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketPullPerformanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticket_PullPerformanceClient interface {
	Recv() (*SlavePerformance, error)
	grpc.ClientStream
}

type ticketPullPerformanceClient struct {
	grpc.ClientStream
}

func (x *ticketPullPerformanceClient) Recv() (*SlavePerformance, error) {
	m := new(SlavePerformance)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketClient) PullTicketStats(ctx context.Context, in *PullTicketStatsRequest, opts ...grpc.CallOption) (*TicketStats, error) {
	out := new(TicketStats)
	err := grpc.Invoke(ctx, "/ticket.Ticket/PullTicketStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) PullTickets(ctx context.Context, in *PullTicketsRequest, opts ...grpc.CallOption) (Ticket_PullTicketsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ticket_serviceDesc.Streams[4], c.cc, "/ticket.Ticket/PullTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketPullTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticket_PullTicketsClient interface {
	Recv() (*TicketDetails, error)
	grpc.ClientStream
}

type ticketPullTicketsClient struct {
	grpc.ClientStream
}

func (x *ticketPullTicketsClient) Recv() (*TicketDetails, error) {
	m := new(TicketDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketClient) SetTicketRange(ctx context.Context, in *TicketRange, opts ...grpc.CallOption) (*TicketRangeReply, error) {
	out := new(TicketRangeReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/SetTicketRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) PullTicketRange(ctx context.Context, in *TicketRangeSid, opts ...grpc.CallOption) (*TicketRange, error) {
	out := new(TicketRange)
	err := grpc.Invoke(ctx, "/ticket.Ticket/PullTicketRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) HareLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := grpc.Invoke(ctx, "/ticket.Ticket/HareLogout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ticket service

type TicketServer interface {
	RhinoCreateAccount(context.Context, *AccountRequest) (*AccountReply, error)
	RhinoLogin(context.Context, *LoginRequest) (*LoginReply, error)
	RhinoChangePassword(context.Context, *PasswordRequest) (*LoginReply, error)
	PullHareOne(context.Context, *HareRequest) (*HareProfiles, error)
	PullHareAll(*HareAllRequest, Ticket_PullHareAllServer) error
	HareCreateAccount(context.Context, *AccountRequest) (*AccountReply, error)
	HareLogin(context.Context, *LoginRequest) (*LoginReply, error)
	HareChangePassword(context.Context, *PasswordRequest) (*LoginReply, error)
	RecordTicket(context.Context, *TicketDetails) (*RecordReply, error)
	SlaveLocSubmit(context.Context, *SlaveLoc) (*MasterOrder, error)
	PullLocation(*PullLocRequest, Ticket_PullLocationServer) error
	PullAnchors(*PullAnchorRequest, Ticket_PullAnchorsServer) error
	PullPerformance(*PullPerformanceRequest, Ticket_PullPerformanceServer) error
	PullTicketStats(context.Context, *PullTicketStatsRequest) (*TicketStats, error)
	PullTickets(*PullTicketsRequest, Ticket_PullTicketsServer) error
	SetTicketRange(context.Context, *TicketRange) (*TicketRangeReply, error)
	PullTicketRange(context.Context, *TicketRangeSid) (*TicketRange, error)
	HareLogout(context.Context, *LogoutRequest) (*LogoutReply, error)
}

func RegisterTicketServer(s *grpc.Server, srv TicketServer) {
	s.RegisterService(&_Ticket_serviceDesc, srv)
}

func _Ticket_RhinoCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).RhinoCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/RhinoCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).RhinoCreateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_RhinoLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).RhinoLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/RhinoLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).RhinoLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_RhinoChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).RhinoChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/RhinoChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).RhinoChangePassword(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_PullHareOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).PullHareOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/PullHareOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).PullHareOne(ctx, req.(*HareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_PullHareAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HareAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServer).PullHareAll(m, &ticketPullHareAllServer{stream})
}

type Ticket_PullHareAllServer interface {
	Send(*HareProfiles) error
	grpc.ServerStream
}

type ticketPullHareAllServer struct {
	grpc.ServerStream
}

func (x *ticketPullHareAllServer) Send(m *HareProfiles) error {
	return x.ServerStream.SendMsg(m)
}

func _Ticket_HareCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).HareCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/HareCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).HareCreateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_HareLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).HareLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/HareLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).HareLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_HareChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).HareChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/HareChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).HareChangePassword(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_RecordTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).RecordTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/RecordTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).RecordTicket(ctx, req.(*TicketDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_SlaveLocSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlaveLoc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).SlaveLocSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/SlaveLocSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).SlaveLocSubmit(ctx, req.(*SlaveLoc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_PullLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullLocRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServer).PullLocation(m, &ticketPullLocationServer{stream})
}

type Ticket_PullLocationServer interface {
	Send(*SlaveNameLoc) error
	grpc.ServerStream
}

type ticketPullLocationServer struct {
	grpc.ServerStream
}

func (x *ticketPullLocationServer) Send(m *SlaveNameLoc) error {
	return x.ServerStream.SendMsg(m)
}

func _Ticket_PullAnchors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAnchorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServer).PullAnchors(m, &ticketPullAnchorsServer{stream})
}

type Ticket_PullAnchorsServer interface {
	Send(*SlaveLoc) error
	grpc.ServerStream
}

type ticketPullAnchorsServer struct {
	grpc.ServerStream
}

func (x *ticketPullAnchorsServer) Send(m *SlaveLoc) error {
	return x.ServerStream.SendMsg(m)
}

func _Ticket_PullPerformance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPerformanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServer).PullPerformance(m, &ticketPullPerformanceServer{stream})
}

type Ticket_PullPerformanceServer interface {
	Send(*SlavePerformance) error
	grpc.ServerStream
}

type ticketPullPerformanceServer struct {
	grpc.ServerStream
}

func (x *ticketPullPerformanceServer) Send(m *SlavePerformance) error {
	return x.ServerStream.SendMsg(m)
}

func _Ticket_PullTicketStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullTicketStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).PullTicketStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/PullTicketStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).PullTicketStats(ctx, req.(*PullTicketStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_PullTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTicketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServer).PullTickets(m, &ticketPullTicketsServer{stream})
}

type Ticket_PullTicketsServer interface {
	Send(*TicketDetails) error
	grpc.ServerStream
}

type ticketPullTicketsServer struct {
	grpc.ServerStream
}

func (x *ticketPullTicketsServer) Send(m *TicketDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Ticket_SetTicketRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).SetTicketRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/SetTicketRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).SetTicketRange(ctx, req.(*TicketRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_PullTicketRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRangeSid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).PullTicketRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/PullTicketRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).PullTicketRange(ctx, req.(*TicketRangeSid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_HareLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).HareLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.Ticket/HareLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).HareLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ticket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.Ticket",
	HandlerType: (*TicketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RhinoCreateAccount",
			Handler:    _Ticket_RhinoCreateAccount_Handler,
		},
		{
			MethodName: "RhinoLogin",
			Handler:    _Ticket_RhinoLogin_Handler,
		},
		{
			MethodName: "RhinoChangePassword",
			Handler:    _Ticket_RhinoChangePassword_Handler,
		},
		{
			MethodName: "PullHareOne",
			Handler:    _Ticket_PullHareOne_Handler,
		},
		{
			MethodName: "HareCreateAccount",
			Handler:    _Ticket_HareCreateAccount_Handler,
		},
		{
			MethodName: "HareLogin",
			Handler:    _Ticket_HareLogin_Handler,
		},
		{
			MethodName: "HareChangePassword",
			Handler:    _Ticket_HareChangePassword_Handler,
		},
		{
			MethodName: "RecordTicket",
			Handler:    _Ticket_RecordTicket_Handler,
		},
		{
			MethodName: "SlaveLocSubmit",
			Handler:    _Ticket_SlaveLocSubmit_Handler,
		},
		{
			MethodName: "PullTicketStats",
			Handler:    _Ticket_PullTicketStats_Handler,
		},
		{
			MethodName: "SetTicketRange",
			Handler:    _Ticket_SetTicketRange_Handler,
		},
		{
			MethodName: "PullTicketRange",
			Handler:    _Ticket_PullTicketRange_Handler,
		},
		{
			MethodName: "HareLogout",
			Handler:    _Ticket_HareLogout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullHareAll",
			Handler:       _Ticket_PullHareAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullLocation",
			Handler:       _Ticket_PullLocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullAnchors",
			Handler:       _Ticket_PullAnchors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullPerformance",
			Handler:       _Ticket_PullPerformance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullTickets",
			Handler:       _Ticket_PullTickets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ticket.proto",
}

func init() { proto.RegisterFile("ticket.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x8e, 0xed, 0xd8, 0xb1, 0x8f, 0x65, 0xc7, 0x61, 0xda, 0x54, 0x73, 0x87, 0x25, 0x51, 0xd1,
	0x2d, 0x2b, 0x8a, 0xa2, 0xf9, 0x43, 0xd7, 0x61, 0xd8, 0x96, 0x26, 0x03, 0x5a, 0x20, 0x6d, 0x03,
	0x3b, 0xc3, 0xb0, 0x2b, 0x83, 0x95, 0x98, 0x58, 0xa8, 0x7e, 0x5c, 0x89, 0x6a, 0xe0, 0xed, 0x6a,
	0x6f, 0x33, 0x60, 0xaf, 0xb0, 0x47, 0x18, 0xb0, 0x87, 0xd8, 0xed, 0x1e, 0x62, 0xe0, 0x21, 0x25,
	0x51, 0xb2, 0xd3, 0xb4, 0xcd, 0xe5, 0xee, 0xcc, 0x8f, 0xdf, 0xf9, 0x48, 0x9d, 0x73, 0x78, 0x78,
	0x68, 0x30, 0xb8, 0x6b, 0xbf, 0x66, 0xfc, 0xc1, 0x24, 0x0a, 0x79, 0x48, 0x1a, 0x72, 0x64, 0xfd,
	0x59, 0x85, 0xee, 0x81, 0x6d, 0x87, 0x49, 0xc0, 0x07, 0xec, 0x4d, 0xc2, 0x62, 0x4e, 0x6e, 0xc1,
	0x52, 0x12, 0xb3, 0x68, 0xe4, 0x3a, 0x66, 0x65, 0xa3, 0xb2, 0xd5, 0x1a, 0x34, 0xc4, 0xf0, 0x99,
	0x43, 0xfa, 0xd0, 0x9c, 0xd0, 0x38, 0xbe, 0x08, 0x23, 0xc7, 0xac, 0xe2, 0x4c, 0x36, 0x26, 0xeb,
	0xd0, 0x9e, 0x84, 0x9e, 0x6b, 0xb3, 0x51, 0x40, 0x7d, 0x66, 0xd6, 0x70, 0x1a, 0x24, 0xf4, 0x82,
	0xfa, 0x4c, 0x23, 0xf0, 0xe9, 0x84, 0x99, 0x8b, 0x3a, 0xe1, 0x74, 0x3a, 0xd1, 0x09, 0xb6, 0xcb,
	0xa7, 0x66, 0x5d, 0x27, 0x1c, 0xba, 0x7c, 0xaa, 0x11, 0x1c, 0x36, 0xe1, 0x66, 0x43, 0x27, 0x1c,
	0xb1, 0x09, 0x27, 0x9b, 0x60, 0x28, 0x42, 0xfc, 0x26, 0xa1, 0x8e, 0xb9, 0x84, 0x0c, 0x65, 0x34,
	0x14, 0x10, 0xb9, 0x0b, 0xdd, 0x94, 0xc2, 0x6c, 0xee, 0x86, 0x81, 0xd9, 0x44, 0x52, 0x47, 0x91,
	0x24, 0x48, 0xbe, 0x80, 0x65, 0x45, 0x9b, 0x84, 0x11, 0x8f, 0xa8, 0xcb, 0xcd, 0xd6, 0x46, 0x65,
	0xcb, 0x18, 0x28, 0xeb, 0x13, 0x85, 0x5a, 0xfb, 0x60, 0x64, 0xde, 0x9b, 0x78, 0x53, 0xa1, 0x6f,
	0x47, 0x8c, 0x72, 0x36, 0x8a, 0x13, 0xdb, 0x66, 0x71, 0x8c, 0x2e, 0x6c, 0x0e, 0x3a, 0x12, 0x1d,
	0x4a, 0xd0, 0x3a, 0x04, 0xe3, 0x38, 0x3c, 0x77, 0x83, 0xeb, 0xb8, 0xdc, 0xfa, 0xbd, 0x0a, 0xa0,
	0x54, 0xc4, 0xd2, 0x77, 0xa0, 0xe3, 0x89, 0x51, 0x69, 0x65, 0x03, 0x41, 0xb5, 0x70, 0x39, 0x4c,
	0xd5, 0xab, 0xc2, 0x54, 0xbb, 0x2a, 0x4c, 0x8b, 0x57, 0x85, 0xa9, 0x7e, 0x65, 0x98, 0x1a, 0xef,
	0x13, 0xa6, 0xa5, 0xf7, 0x0c, 0x53, 0x73, 0x6e, 0x98, 0xd6, 0xa1, 0xfd, 0x94, 0x46, 0x2c, 0x75,
	0x77, 0x0f, 0x6a, 0x71, 0xe6, 0x6a, 0xf1, 0xd3, 0xb2, 0xa0, 0x2b, 0x08, 0x07, 0x9e, 0xa7, 0x71,
	0xfc, 0x9c, 0xe3, 0xbb, 0x8e, 0xf5, 0x6f, 0x15, 0x0c, 0x41, 0x3a, 0x89, 0xc2, 0x33, 0xd7, 0x63,
	0xb1, 0xf8, 0x90, 0x31, 0x8d, 0xca, 0xa1, 0x6e, 0x0b, 0x2c, 0xf5, 0xb7, 0x16, 0xd8, 0x6a, 0x21,
	0xb0, 0xff, 0xcf, 0xf3, 0x42, 0xbe, 0x84, 0x5e, 0xfa, 0x55, 0xe3, 0xc4, 0x7f, 0x15, 0x50, 0xd7,
	0x33, 0x01, 0x99, 0x4a, 0xe0, 0x34, 0x85, 0x2d, 0x17, 0x96, 0x4f, 0x54, 0xaa, 0x5f, 0xab, 0x32,
	0x6d, 0x82, 0x11, 0xb0, 0x8b, 0x51, 0x36, 0x2f, 0x5d, 0xdd, 0x0e, 0xd8, 0x45, 0x2a, 0x6f, 0xfd,
	0xb3, 0x08, 0x9d, 0x53, 0xac, 0x87, 0x47, 0x8c, 0x53, 0xd7, 0x8b, 0xc9, 0x6d, 0x68, 0xc9, 0x02,
	0x99, 0xae, 0x55, 0x1b, 0x34, 0x25, 0xf0, 0xcc, 0x79, 0x67, 0x50, 0xc5, 0x37, 0x04, 0x31, 0x1b,
	0x05, 0x89, 0x9f, 0x06, 0x55, 0x41, 0x2f, 0x12, 0x1f, 0xcf, 0xa8, 0x22, 0xd8, 0xa1, 0x17, 0x46,
	0x2a, 0xac, 0x86, 0x02, 0x0f, 0x05, 0x26, 0x36, 0xfc, 0x96, 0x8d, 0x5d, 0xdb, 0x53, 0xa1, 0x97,
	0x91, 0x6d, 0x2b, 0x0c, 0x63, 0x7f, 0x07, 0x3a, 0x29, 0x45, 0xea, 0xc8, 0xe0, 0xa6, 0x76, 0x52,
	0x87, 0xc0, 0xe2, 0x94, 0xd1, 0x08, 0xc3, 0x5a, 0x1f, 0xe0, 0x6f, 0x72, 0x03, 0xea, 0x7e, 0x18,
	0xf0, 0x31, 0x86, 0xb1, 0x3e, 0x90, 0x03, 0xc1, 0xbc, 0x60, 0xec, 0x35, 0xc6, 0xac, 0x3e, 0xc0,
	0xdf, 0x22, 0xff, 0x1d, 0x3a, 0xc5, 0xe0, 0xd4, 0x07, 0xe2, 0xa7, 0x60, 0x8d, 0xc3, 0x24, 0x32,
	0xdb, 0x92, 0x25, 0x7e, 0x93, 0x35, 0x68, 0xf8, 0x6e, 0x90, 0x70, 0x66, 0x1a, 0x88, 0xaa, 0x91,
	0xf0, 0x84, 0xf2, 0x1f, 0x77, 0x7d, 0x66, 0x76, 0xd0, 0x83, 0x20, 0xa1, 0x53, 0xd7, 0x67, 0xc4,
	0x84, 0x25, 0xea, 0x38, 0x91, 0x38, 0x36, 0x5d, 0xdc, 0x7b, 0x3a, 0x24, 0x9f, 0x42, 0xcb, 0x0b,
	0x83, 0x73, 0x97, 0x27, 0x0e, 0x33, 0x97, 0x37, 0x2a, 0x5b, 0x95, 0x41, 0x0e, 0x88, 0x48, 0x7b,
	0x94, 0xcb, 0xc9, 0x1e, 0x4e, 0x66, 0x63, 0x11, 0x34, 0x9f, 0x4e, 0x46, 0xae, 0x4f, 0xcf, 0x99,
	0xb9, 0x82, 0x59, 0xd5, 0xf4, 0xe9, 0xe4, 0x99, 0x18, 0x8b, 0xc9, 0x33, 0x1a, 0xa9, 0x49, 0x22,
	0x27, 0xcf, 0x68, 0x24, 0x27, 0xd7, 0xa1, 0x6d, 0x7b, 0x61, 0xcc, 0xd4, 0xf4, 0x2a, 0x4e, 0x03,
	0x42, 0x92, 0xb0, 0x99, 0x5e, 0x9f, 0x8a, 0x71, 0x03, 0x19, 0xea, 0x1b, 0x33, 0x0d, 0x37, 0x1e,
	0x25, 0x13, 0x2f, 0xa4, 0x0e, 0x73, 0xcc, 0x9b, 0x58, 0x0c, 0xc0, 0x8d, 0x7f, 0x54, 0x88, 0xb5,
	0x07, 0xed, 0x01, 0xb3, 0x31, 0x9d, 0xd5, 0x55, 0x11, 0xe1, 0xb0, 0x7c, 0x55, 0x48, 0x34, 0xbd,
	0x2a, 0x7e, 0xab, 0x40, 0x5b, 0xe6, 0xe6, 0x90, 0x53, 0x1e, 0xcf, 0xd6, 0x2e, 0x72, 0x1f, 0x48,
	0x4c, 0xdf, 0x32, 0x67, 0xa4, 0x76, 0x88, 0xd7, 0x11, 0x66, 0x66, 0x7d, 0xd0, 0xc3, 0x19, 0x69,
	0x7f, 0x28, 0x70, 0xb2, 0x03, 0x37, 0xd3, 0x3d, 0x16, 0x0d, 0x6a, 0x68, 0xb0, 0x9a, 0x4e, 0x6a,
	0x36, 0xd6, 0x36, 0x74, 0x4f, 0x12, 0xcf, 0x3b, 0x0e, 0xed, 0xf4, 0x24, 0x96, 0x6a, 0x4b, 0xa5,
	0x5c, 0x5b, 0xac, 0xc7, 0xb0, 0x26, 0x4c, 0x4e, 0x58, 0x74, 0x16, 0x46, 0x3e, 0x0d, 0x6c, 0xf6,
	0xde, 0xa6, 0x77, 0x61, 0x45, 0x98, 0x1e, 0x04, 0xf6, 0x38, 0x8c, 0x2e, 0x2f, 0xd9, 0xf7, 0xe4,
	0x0a, 0x9a, 0x6f, 0x2e, 0xe7, 0xbe, 0x06, 0x92, 0x73, 0x2f, 0xe7, 0x65, 0x47, 0xa6, 0xaa, 0x1d,
	0x99, 0xf4, 0x70, 0xd4, 0xb4, 0xc3, 0x71, 0x1b, 0x5a, 0x1e, 0x8d, 0x55, 0x72, 0x2f, 0xca, 0xf2,
	0x20, 0x00, 0x91, 0xda, 0xd6, 0x05, 0x34, 0x87, 0x1e, 0x7d, 0xcb, 0x8e, 0x43, 0x7b, 0xce, 0x12,
	0xa5, 0xcf, 0xaf, 0xce, 0x54, 0xe5, 0x42, 0xfe, 0xd7, 0xde, 0x95, 0xff, 0x8b, 0xc5, 0xfc, 0xb7,
	0x7e, 0x05, 0x03, 0x17, 0x16, 0xf7, 0xc7, 0x55, 0x8b, 0x5f, 0x72, 0xfd, 0x7f, 0xfc, 0xe2, 0x7f,
	0x55, 0xa1, 0x87, 0xab, 0x6b, 0x21, 0xff, 0x98, 0x1d, 0x94, 0xfc, 0x53, 0x9b, 0xf1, 0xcf, 0xfc,
	0x74, 0x5f, 0xfc, 0xd0, 0x74, 0xaf, 0x5f, 0x9a, 0xee, 0x64, 0x0b, 0x7a, 0x3a, 0x75, 0x24, 0xea,
	0x60, 0x03, 0xe9, 0x5d, 0x9e, 0xd3, 0x8e, 0xe8, 0x94, 0xdc, 0x83, 0x95, 0x02, 0x13, 0x13, 0x45,
	0xd6, 0xdb, 0x65, 0x8d, 0xfa, 0x93, 0xc8, 0x99, 0xfb, 0x40, 0x0a, 0x5c, 0xbd, 0x0e, 0xf7, 0x34,
	0xf2, 0x73, 0x81, 0x5b, 0x4f, 0xa0, 0xfd, 0x9c, 0xc6, 0x9c, 0x45, 0x2f, 0x23, 0x87, 0x45, 0xb3,
	0xdd, 0x88, 0xa8, 0x48, 0x3e, 0x12, 0x46, 0xa1, 0x60, 0x28, 0x4f, 0xb6, 0xfd, 0xdc, 0xc8, 0xfa,
	0xbb, 0xa6, 0x12, 0x42, 0x1e, 0xa5, 0x79, 0xb5, 0x63, 0x13, 0x0c, 0x8a, 0x93, 0x85, 0xaa, 0xd1,
	0x96, 0x98, 0xf4, 0xc6, 0x3a, 0xa8, 0xe1, 0xc3, 0x91, 0x17, 0x9c, 0xab, 0xa4, 0x00, 0x05, 0x1d,
	0x07, 0xe7, 0x05, 0x02, 0xe5, 0x2a, 0x31, 0x32, 0x02, 0xd5, 0x14, 0xb6, 0x51, 0xa1, 0xae, 0x13,
	0xb6, 0x0b, 0x0a, 0xdb, 0xa8, 0xd0, 0x28, 0x12, 0x74, 0x85, 0x1d, 0x54, 0x58, 0xd2, 0x09, 0x3b,
	0x05, 0x85, 0x1d, 0x54, 0x68, 0x16, 0x09, 0xba, 0xc2, 0x2e, 0x2a, 0xb4, 0x74, 0xc2, 0x6e, 0x41,
	0x61, 0x17, 0x15, 0xa0, 0x48, 0xd0, 0x15, 0xf6, 0x50, 0xa1, 0xad, 0x13, 0xf6, 0x0a, 0x0a, 0x7b,
	0xa8, 0x60, 0x14, 0x09, 0xba, 0xc2, 0x3e, 0x2a, 0x74, 0x74, 0xc2, 0x7e, 0x41, 0x61, 0x1f, 0x15,
	0xba, 0x45, 0x02, 0xe5, 0xd6, 0xcf, 0xe9, 0x5d, 0x30, 0xa0, 0xc1, 0x39, 0x23, 0x9f, 0xc3, 0x72,
	0xd6, 0xa5, 0x8c, 0x62, 0x4e, 0x23, 0xae, 0x7a, 0x95, 0x4e, 0xda, 0xab, 0x0c, 0x05, 0x48, 0x2c,
	0xe8, 0xe4, 0x3c, 0x16, 0xc8, 0xb6, 0xa5, 0x96, 0x5d, 0x5f, 0xce, 0x0f, 0x81, 0x63, 0x3d, 0x82,
	0x9e, 0x26, 0x9d, 0x3d, 0x29, 0x22, 0x31, 0x2a, 0x3f, 0x29, 0x10, 0x4c, 0x2f, 0x28, 0x0b, 0xba,
	0x9a, 0xe1, 0xd0, 0x75, 0xe6, 0xd4, 0xdf, 0x2d, 0xe8, 0x1c, 0x87, 0xe7, 0x61, 0x72, 0xe5, 0x1b,
	0x53, 0x5c, 0x92, 0x29, 0x53, 0x5d, 0x92, 0x1e, 0x0e, 0xcb, 0x97, 0xa4, 0x44, 0xd5, 0x1e, 0x76,
	0xfe, 0x68, 0x41, 0x43, 0x6e, 0x82, 0x1c, 0x01, 0x19, 0x8c, 0xdd, 0x20, 0x3c, 0xc4, 0x07, 0x97,
	0x7a, 0x9c, 0x91, 0xb5, 0x07, 0xea, 0xf5, 0x5b, 0x7c, 0xeb, 0xf6, 0x6f, 0xcc, 0xe0, 0x13, 0x6f,
	0x6a, 0x2d, 0x90, 0xaf, 0x00, 0x50, 0x05, 0xdf, 0x57, 0x24, 0x63, 0xe9, 0x8f, 0xb6, 0x3e, 0x29,
	0xa1, 0xd2, 0xf2, 0x08, 0x56, 0xe5, 0xfa, 0x63, 0xe1, 0x8e, 0xb4, 0xc5, 0x24, 0xb7, 0x52, 0x72,
	0xa9, 0xa7, 0xbd, 0x44, 0xe5, 0x6b, 0x68, 0x8b, 0x0b, 0x4b, 0x3c, 0x37, 0x5e, 0x06, 0x8c, 0xac,
	0xa6, 0x24, 0xed, 0x15, 0x93, 0xef, 0x5d, 0x7f, 0x94, 0x58, 0x0b, 0xe4, 0xbb, 0xdc, 0xf6, 0xc0,
	0xf3, 0xf2, 0x4f, 0x2f, 0x3e, 0x70, 0x2e, 0x33, 0x7f, 0x58, 0x21, 0x87, 0xb0, 0x22, 0xb0, 0xeb,
	0x79, 0xf0, 0x11, 0xb4, 0x84, 0xc8, 0x87, 0x3b, 0xf0, 0x10, 0x08, 0xae, 0x7e, 0x2d, 0xff, 0x7d,
	0x03, 0x86, 0xec, 0xb5, 0x54, 0x56, 0xdc, 0x4c, 0x59, 0x85, 0x36, 0xbf, 0x9f, 0xf9, 0x55, 0x6b,
	0xcc, 0xac, 0x05, 0xf2, 0x18, 0xba, 0xe9, 0x0d, 0x3e, 0x4c, 0x5e, 0xf9, 0x2e, 0x27, 0xbd, 0x94,
	0x98, 0xe2, 0xb9, 0xa9, 0x56, 0xa6, 0xad, 0x05, 0xf2, 0x3d, 0x18, 0xaa, 0x55, 0xa2, 0xf8, 0x32,
	0xca, 0xdc, 0x56, 0x6c, 0xa0, 0x72, 0xb7, 0xe9, 0x37, 0x36, 0x7a, 0xff, 0x5b, 0x19, 0xbe, 0xb4,
	0x66, 0x7f, 0xa2, 0x0b, 0x14, 0x7a, 0xa2, 0xfe, 0xcc, 0xa6, 0xd0, 0xfe, 0x25, 0x2c, 0x97, 0x3a,
	0x2f, 0xf2, 0x99, 0xae, 0x31, 0xdb, 0x92, 0xf5, 0xcd, 0x82, 0x90, 0x46, 0x40, 0xc1, 0xa7, 0x52,
	0x50, 0x6f, 0x42, 0x0b, 0x82, 0xb3, 0x1d, 0x58, 0xee, 0x1c, 0x6d, 0x0e, 0xcf, 0x46, 0x5b, 0x6b,
	0xc3, 0x48, 0x7f, 0x56, 0x25, 0x53, 0x98, 0x1f, 0x30, 0xdc, 0xcf, 0x01, 0x74, 0x87, 0xe2, 0x15,
	0x91, 0xd7, 0xc1, 0xd2, 0x72, 0x08, 0xe6, 0x1f, 0x55, 0x2e, 0x6b, 0x18, 0x25, 0xed, 0x93, 0xa4,
	0xc6, 0xda, 0x1c, 0xfa, 0xd0, 0x75, 0xfa, 0xf3, 0xb4, 0xf1, 0x80, 0x82, 0x4a, 0xef, 0x30, 0xd1,
	0xd2, 0xab, 0x50, 0xe5, 0x72, 0x5b, 0xad, 0xa4, 0x59, 0x0b, 0x4f, 0x36, 0x60, 0xd9, 0x0d, 0x1f,
	0xd8, 0x63, 0xf7, 0x17, 0x57, 0x11, 0x9e, 0xa8, 0xb2, 0x7e, 0x12, 0x85, 0x3c, 0x3c, 0xa9, 0xbc,
	0x6a, 0xe0, 0x9f, 0x74, 0xbb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xdb, 0xbc, 0x4a, 0xb4,
	0x13, 0x00, 0x00,
}
